{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "AccountService",
            "id": "injectable-AccountService-346e0a280b2572312d2ac4b148e44de3",
            "file": "src/app/services/account.service.ts",
            "properties": [
                {
                    "name": "store",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "type": "Observable<User>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userSubject",
                    "type": "BehaviorSubject<User>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": ""
                        },
                        {
                            "name": "password",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { User } from '../models/user';\nimport { environment } from '../../environments/environment';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../app.model';\nimport { IsLoggedIn } from '../store/app.actions';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AccountService {\n    private userSubject: BehaviorSubject<User>;\n    public user: Observable<User>;\n\n    constructor(\n        private router: Router,\n        private http: HttpClient,\n        public store: Store<AppState>\n    ) {\n        this.userSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('user')));\n        this.user = this.userSubject.asObservable();\n    }\n\n    public get userValue(): User {\n        return this.userSubject.value;\n    }\n\n    login(username, password) {\n        return this.http.post<User>(`${environment.apiUrl}/users/authenticate`, { username, password })\n            .pipe(map(user => {\n                localStorage.setItem('user', JSON.stringify(user));\n                this.userSubject.next(user);\n                return user;\n            }));\n    }\n\n    logout() {\n        localStorage.removeItem('user');\n        this.userSubject.next(null);\n        this.router.navigate(['/']);\n        this.store.dispatch(new IsLoggedIn(false));\n    }\n\n    register(user) {\n        console.log(user);\n        return this.http.post(`${environment.apiUrl}/users/register`, user);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "userValue": {
                    "name": "userValue",
                    "getSignature": {
                        "name": "userValue",
                        "type": "",
                        "returnType": "User",
                        "line": 28
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "AppEffects",
            "id": "injectable-AppEffects-05fd86b894a0b953a76f15a31f8807a3",
            "file": "src/app/store/app.effects.ts",
            "properties": [
                {
                    "name": "addLinks$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType(AppActionType.SAVE_SHARED_LINKS),\r\n        switchMap((action: SaveSharedLinks) => {\r\n            return this.activityService.addLinks(action.requestBody).pipe(\r\n                map((obj: any) => new SaveSharedLinksSuccess(obj)),\r\n                catchError(error => of(new FetchUserDataError(error.status)))\r\n            );\r\n        })\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deleteLink$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType(AppActionType.DELETE_LINK),\r\n        switchMap((action: DeleteLink) => {\r\n            return this.activityService.deleteLink(action.id).pipe(\r\n                map((obj: any) => new DeleteLinkSuccess(obj)),\r\n                catchError(error => of(new DeleteLinkError(error.status)))\r\n            );\r\n        })\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateLink$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType(AppActionType.UPDATE_LINK),\r\n        switchMap((action: UpdateLink) => {\r\n            return this.activityService.updateLink(action.id, action.requestBody).pipe(\r\n                map((obj: any) => new UpdateLinkSuccess(obj)),\r\n                catchError(error => of(new UpdateLinkError(error.status)))\r\n            );\r\n        })\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userData$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType(AppActionType.FETCH_USER_DATA),\r\n        switchMap((action: FetchUserData) => {\r\n            return this.activityService.fetchLinks().pipe(\r\n                map((obj: any) => new FetchUserDataSuccess(obj)),\r\n                catchError(error => of(new FetchUserDataError(error.status)))\r\n            );\r\n        })\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userLogin$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType(AppActionType.USER_LOGIN),\r\n        switchMap((action: UserLogin) => {\r\n            return this.accountService.login(action.username, action.password).pipe(\r\n                map((obj: any) => new UserLoginSuccess(obj)),\r\n                catchError(error => of(new UserLoginError(error)))\r\n            );\r\n        })\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../app.model';\r\nimport { Effect, Actions, ofType } from '@ngrx/effects';\r\nimport { AppServiceService } from '../services/app-service.service';\r\nimport {\r\n    AppActionType,\r\n    FetchUserData,\r\n    FetchUserDataSuccess,\r\n    FetchUserDataError,\r\n    SaveSharedLinks,\r\n    SaveSharedLinksSuccess,\r\n    DeleteLink,\r\n    DeleteLinkSuccess,\r\n    DeleteLinkError,\r\n    UpdateLink,\r\n    UpdateLinkSuccess,\r\n    UpdateLinkError,\r\n    UserLogin,\r\n    UserLoginSuccess,\r\n    UserLoginError\r\n} from '../store/app.actions';\r\nimport { switchMap, map, catchError } from 'rxjs/operators';\r\nimport { AccountService } from '../services/account.service';\r\nimport { of } from 'rxjs';\r\n@Injectable()\r\nexport class AppEffects {\r\n\r\n    @Effect()\r\n    public userData$ = this.actions$.pipe(\r\n        ofType(AppActionType.FETCH_USER_DATA),\r\n        switchMap((action: FetchUserData) => {\r\n            return this.activityService.fetchLinks().pipe(\r\n                map((obj: any) => new FetchUserDataSuccess(obj)),\r\n                catchError(error => of(new FetchUserDataError(error.status)))\r\n            );\r\n        })\r\n    );\r\n\r\n    @Effect()\r\n    public addLinks$ = this.actions$.pipe(\r\n        ofType(AppActionType.SAVE_SHARED_LINKS),\r\n        switchMap((action: SaveSharedLinks) => {\r\n            return this.activityService.addLinks(action.requestBody).pipe(\r\n                map((obj: any) => new SaveSharedLinksSuccess(obj)),\r\n                catchError(error => of(new FetchUserDataError(error.status)))\r\n            );\r\n        })\r\n    );\r\n\r\n    @Effect()\r\n    public deleteLink$ = this.actions$.pipe(\r\n        ofType(AppActionType.DELETE_LINK),\r\n        switchMap((action: DeleteLink) => {\r\n            return this.activityService.deleteLink(action.id).pipe(\r\n                map((obj: any) => new DeleteLinkSuccess(obj)),\r\n                catchError(error => of(new DeleteLinkError(error.status)))\r\n            );\r\n        })\r\n    );\r\n\r\n    @Effect()\r\n    public updateLink$ = this.actions$.pipe(\r\n        ofType(AppActionType.UPDATE_LINK),\r\n        switchMap((action: UpdateLink) => {\r\n            return this.activityService.updateLink(action.id, action.requestBody).pipe(\r\n                map((obj: any) => new UpdateLinkSuccess(obj)),\r\n                catchError(error => of(new UpdateLinkError(error.status)))\r\n            );\r\n        })\r\n    );\r\n\r\n    @Effect()\r\n    public userLogin$ = this.actions$.pipe(\r\n        ofType(AppActionType.USER_LOGIN),\r\n        switchMap((action: UserLogin) => {\r\n            return this.accountService.login(action.username, action.password).pipe(\r\n                map((obj: any) => new UserLoginSuccess(obj)),\r\n                catchError(error => of(new UserLoginError(error)))\r\n            );\r\n        })\r\n    );\r\n\r\n    constructor(\r\n        private store: Store<AppState>,\r\n        private actions$: Actions,\r\n        private activityService: AppServiceService,\r\n        private accountService: AccountService\r\n    ) { }\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "activityService",
                        "type": "AppServiceService"
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    }
                ],
                "line": 82,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityService",
                        "type": "AppServiceService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AppServiceService",
            "id": "injectable-AppServiceService-84d454fcc73fb4b06531d498681c548f",
            "file": "src/app/services/app-service.service.ts",
            "properties": [
                {
                    "name": "http",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addLinks",
                    "args": [
                        {
                            "name": "requestBody",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "requestBody",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteLink",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateLink",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        },
                        {
                            "name": "requestBody",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requestBody",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppServiceService {\n  constructor(public http: HttpClient) { }\n\n  public fetchLinks(): Observable<any> {\n    return this.http.get<any>(`${environment.url}/posts`);\n  }\n\n  public addLinks(requestBody): Observable<any> {\n    return this.http.post<any>(`${environment.url}/posts`, requestBody);\n  }\n\n  public deleteLink(id): Observable<any> {\n    return this.http.delete<any>(`${environment.url}/posts/${id}`);\n  }\n\n  public updateLink(id, requestBody): Observable<any> {\n    return this.http.put<any>(`${environment.url}/posts/${id}`, requestBody);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-c4e68d26016b532e6bad430b7f893a70",
            "file": "src/app/services/theme.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDark",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "toggleLight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nexport const darkTheme = {\r\n  'primary-color': '#455363',\r\n  'background-color': '#1f2935',\r\n  'text-color': '#fff'\r\n};\r\n\r\nexport const lightTheme = {\r\n  'primary-color': '#fff',\r\n  'background-color': '#fff',\r\n  'text-color': '#2d2d2d'\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ThemeService {\r\n  toggleDark() {\r\n    this.setTheme(darkTheme);\r\n  }\r\n\r\n  toggleLight() {\r\n    this.setTheme(lightTheme);\r\n  }\r\n\r\n  private setTheme(theme: {}) {\r\n    Object.keys(theme).forEach(k =>\r\n      document.documentElement.style.setProperty(`--${k}`, theme[k])\r\n    );\r\n  }\r\n}",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppModelState",
            "id": "class-AppModelState-a7eb07432d98a1736450bce94246589a",
            "file": "src/app/models/appModel.model.ts",
            "type": "class",
            "sourceCode": "export class AppModelState {\r\n    data: any;\r\n    isLoggedIn: boolean;\r\n    requestBody: any;\r\n    id: any;\r\n    error: any;\r\n}",
            "properties": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "error",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isLoggedIn",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "requestBody",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppState",
            "id": "class-AppState-8b170a2d49eab1e89b4123adbd7ff197",
            "file": "src/app/app.model.ts",
            "type": "class",
            "sourceCode": "import { AppModelState } from './models/appModel.model';\r\n\r\nexport class AppState {\r\n    appModel: AppModelState;\r\n}",
            "properties": [
                {
                    "name": "appModel",
                    "type": "AppModelState",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteLink",
            "id": "class-DeleteLink-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "any"
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.DELETE_LINK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteLinkError",
            "id": "class-DeleteLinkError-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "error",
                        "type": "any"
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "error",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.DELETE_LINK_ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteLinkSuccess",
            "id": "class-DeleteLinkSuccess-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.DELETE_LINK_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FetchUserData",
            "id": "class-FetchUserData-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AppActionType.FETCH_USER_DATA",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FetchUserDataError",
            "id": "class-FetchUserDataError-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "error",
                        "type": "any"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "error",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.FETCH_USER_DATA_ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "FetchUserDataSuccess",
            "id": "class-FetchUserDataSuccess-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.FETCH_USER_DATA_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "IsError",
            "id": "class-IsError-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "err",
                        "type": "any"
                    }
                ],
                "line": 90,
                "jsdoctags": [
                    {
                        "name": "err",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "err",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.IS_ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "IsLoggedIn",
            "id": "class-IsLoggedIn-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "isLoggedIn",
                        "type": "boolean"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "isLoggedIn",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "isLoggedIn",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.IS_LOGGED_IN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SaveSharedLinks",
            "id": "class-SaveSharedLinks-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "requestBody",
                        "type": "any"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "requestBody",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "requestBody",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.SAVE_SHARED_LINKS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SaveSharedLinksError",
            "id": "class-SaveSharedLinksError-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "error",
                        "type": "any"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "error",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.SAVE_SHARED_LINKS_ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SaveSharedLinksSuccess",
            "id": "class-SaveSharedLinksSuccess-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.SAVE_SHARED_LINKS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateLink",
            "id": "class-UpdateLink-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "any"
                    },
                    {
                        "name": "requestBody",
                        "type": "any"
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "requestBody",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "requestBody",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.UPDATE_LINK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateLinkError",
            "id": "class-UpdateLinkError-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "error",
                        "type": "any"
                    }
                ],
                "line": 85,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "error",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.UPDATE_LINK_ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateLinkSuccess",
            "id": "class-UpdateLinkSuccess-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 80,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.UPDATE_LINK_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "User",
            "id": "class-User-eb0459e27e62dba5d878bc3f3c9ddc21",
            "file": "src/app/models/user.ts",
            "type": "class",
            "sourceCode": "export class User {\r\n    id: string;\r\n    username: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    token: string;\r\n}",
            "properties": [
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "token",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserLogin",
            "id": "class-UserLogin-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "username",
                        "type": "any"
                    },
                    {
                        "name": "password",
                        "type": "any"
                    }
                ],
                "line": 95,
                "jsdoctags": [
                    {
                        "name": "username",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "password",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "password",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.USER_LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "username",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UserLoginError",
            "id": "class-UserLoginError-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "err",
                        "type": "any"
                    }
                ],
                "line": 105,
                "jsdoctags": [
                    {
                        "name": "err",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "err",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.USER_LOGIN_ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UserLoginSuccess",
            "id": "class-UserLoginSuccess-093a7dcc0e521d9bb0c6bc011f49bf00",
            "file": "src/app/store/app.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AppActionType {\r\n    FETCH_USER_DATA = 'Activity: FETCH_USER_DATA',\r\n    FETCH_USER_DATA_SUCCESS = 'Activity: FETCH_USER_DATA_SUCCESS',\r\n    FETCH_USER_DATA_ERROR = 'Activity: FETCH_USER_DATA_ERROR',\r\n    IS_LOGGED_IN = 'Activity: IS_LOGGED_IN',\r\n    IS_LOGGED_IN_SUCCESS = 'Activity: IS_LOGGED_IN_SUCCESS',\r\n    SAVE_SHARED_LINKS = 'Activity: SAVE_SHARED_LINKS',\r\n    SAVE_SHARED_LINKS_SUCCESS = 'Activity: SAVE_SHARED_LINKS_SUCCESS',\r\n    SAVE_SHARED_LINKS_ERROR = 'Activity: SAVE_SHARED_LINKS_ERROR',\r\n    DELETE_LINK = 'Activity: DELETE_LINK',\r\n    DELETE_LINK_SUCCESS = 'Activity: DELETE_LINK_SUCCESS',\r\n    DELETE_LINK_ERROR = 'Activity: DELETE_LINK_ERROR',\r\n    UPDATE_LINK = 'Activity: UPDATE_LINK',\r\n    UPDATE_LINK_SUCCESS = 'Activity: UPDATE_LINK_SUCCESS',\r\n    UPDATE_LINK_ERROR = 'Activity: UPDATE_LINK_SUCCESS',\r\n    IS_ERROR = 'Activity: IS_ERROR',\r\n    USER_LOGIN = 'Activity: USER_LOGIN',\r\n    USER_LOGIN_SUCCESS = 'Activity: USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_ERROR = 'Activity: USER_LOGIN_ERROR'\r\n}\r\n\r\nexport class FetchUserData implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA;\r\n    constructor() { }\r\n}\r\n\r\nexport class FetchUserDataSuccess implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class FetchUserDataError implements Action {\r\n    readonly type = AppActionType.FETCH_USER_DATA_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsLoggedIn implements Action {\r\n    readonly type = AppActionType.IS_LOGGED_IN;\r\n    constructor(public isLoggedIn: boolean) { }\r\n}\r\n\r\nexport class SaveSharedLinks implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS;\r\n    constructor(public requestBody: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksSuccess implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class SaveSharedLinksError implements Action {\r\n    readonly type = AppActionType.SAVE_SHARED_LINKS_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class DeleteLink implements Action {\r\n    readonly type = AppActionType.DELETE_LINK;\r\n    constructor(public id: any) { }\r\n}\r\n\r\nexport class DeleteLinkSuccess implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class DeleteLinkError implements Action {\r\n    readonly type = AppActionType.DELETE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class UpdateLink implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK;\r\n    constructor(public id: any, public requestBody: any) { }\r\n}\r\n\r\nexport class UpdateLinkSuccess implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UpdateLinkError implements Action {\r\n    readonly type = AppActionType.UPDATE_LINK_ERROR;\r\n    constructor(public error: any) { }\r\n}\r\n\r\nexport class IsError implements Action {\r\n    readonly type = AppActionType.IS_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport class UserLogin implements Action {\r\n    readonly type = AppActionType.USER_LOGIN;\r\n    constructor(public username: any, public password: any) { }\r\n}\r\n\r\nexport class UserLoginSuccess implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_SUCCESS;\r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class UserLoginError implements Action {\r\n    readonly type = AppActionType.USER_LOGIN_ERROR;\r\n    constructor(public err: any) { }\r\n}\r\n\r\nexport type AppAction =\r\n    | FetchUserData\r\n    | FetchUserDataSuccess\r\n    | IsLoggedIn\r\n    | SaveSharedLinks\r\n    | SaveSharedLinksSuccess\r\n    | SaveSharedLinksError\r\n    | IsError\r\n    | UserLogin\r\n    | UserLoginSuccess\r\n    | UserLoginError;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 100,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AppActionType.USER_LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-85eeca5b590999101ecb606bd5c8d40f",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'movieShare'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'movieShare';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<main>\r\n    <router-outlet></router-outlet>\r\n</main>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-28bf689e7e1027d6e9fddae576d78235-1",
            "file": "src/app/shared/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonConfig",
                    "defaultValue": "null",
                    "line": 11,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent implements OnInit {\n\n  constructor() { }\n  @Input() buttonConfig: any = null;\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".text-btn {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n  }\r\n  \r\n  .img-btn {\r\n    position: \"relative\";\r\n    background-color: none;\r\n    width: \"100px\";\r\n    height: \"100px\";\r\n    cursor: pointer;\r\n    background-color: white;\r\n    border: none;\r\n  }\r\n  ",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<ng-container *ngIf=\"buttonConfig?.text then text else image\">\n</ng-container>\n<ng-template #text>\n <button type=\"button\" class=\"text-btn\">\n {{ buttonConfig?.text}}\n </button>\n</ng-template>\n<ng-template #image>\n    <button class=\"img-btn\"><img alt=\"image button\" [src]=\"buttonConfig?.src\"></button>\n</ng-template>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-ed699f147e96546c7c4d14211a032608-1",
            "file": "src/app/shared/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isLoggedIn",
                    "line": 12
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input} from '@angular/core';\nimport classnames from 'classnames';\nimport { AccountService } from 'src/app/services';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  @Input() isLoggedIn;\n\n  constructor(private accountService: AccountService) { }\n  ngOnInit(): void {\n  }\n\n  // logout() {\n  //   this.accountService.logout();\n  // }\n}\n\n\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$cls: \".app-header\";\r\n\r\n:host(#{$cls}) {\r\n  display: block;\r\n}\r\n\r\n#{$cls} {\r\n  &__container {\r\n    align-items: center;\r\n    display: flex;\r\n    width: 100%;\r\n    background-color: #267483;\r\n    h1{\r\n      color: white;\r\n      padding: 0 4rem;\r\n    }\r\n  }\r\n  &__content {\r\n    align-items: center;\r\n    display: flex;\r\n    flex: 0 0 auto;\r\n    max-height: 5rem;\r\n    // background-color: #33c2cc;\r\n  }\r\n\r\n  &__nav {\r\n    align-items: center;\r\n    display: flex;\r\n    flex: 1 1 auto;\r\n    justify-content: flex-end;\r\n    min-height: 7rem;\r\n    background-color: #33c2cc;\r\n    a{\r\n      font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n      font-weight: 700;\r\n      border: 0;\r\n      border-radius: 3em;\r\n      cursor: pointer;\r\n      display: inline-block;\r\n      line-height: 1;\r\n      font-size: 16px;\r\n      padding: 12px 24px;\r\n      background-color: #267483;\r\n      text-decoration: none;\r\n      color: white;\r\n      margin-left: 1rem;\r\n    }\r\n  }\r\n  \r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<header class=\"app-header__container\">\n    <div class=\"app-header__content\">\n        <h1>Movie Share</h1>\n    </div>\n    <nav *ngIf=\"isLoggedIn ; else logout\" class=\"app-header__nav\">\n        <button (click)=\"logout()\">Logout</button>\n    </nav>\n    <ng-template #logout>\n        <nav class=\"app-header__nav\">\n            <a alt= \"Login\" routerLink=\"/login\">Login</a>\n            <a alt=\"Register\"  routerLink=\"/register\">Register\n            </a>\n        </nav>\n       </ng-template>\n    <nav></nav>\n</header>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-a56f8a1a5d303e8b4ca1057d6c9253ef",
            "file": "src/app/components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accountService",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectData$",
                    "defaultValue": "this.store.select(selectData)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "store",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "time",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "timerGame",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/app.model';\nimport { selectData } from 'src/app/store/app.selector';\nimport { AccountService } from 'src/app/services';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  public time;\n  public selectData$: Observable<any> = this.store.select(selectData);\n\n  constructor(\n    private router: Router,\n    public store: Store<AppState>,\n    public accountService: AccountService) { }\n\n  ngOnInit(): void {\n  }\n\n  timerGame() {\n    console.log('Ready....go!');\n    setTimeout(() => {\n   this.time = \"Shraddha\";\n    }, 1000);\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>home works!</p>\n"
        },
        {
            "name": "InteriorPageComponent",
            "id": "component-InteriorPageComponent-03d048c5d6744a9dc68bb06d7958f8b7",
            "file": "src/app/components/interior-page/interior-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-interior-page",
            "styleUrls": [
                "./interior-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./interior-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoggedIn",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectIsLoggedIn$",
                    "defaultValue": "this.store.select(selectIsLoggedIn)",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "store",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/app.model';\nimport { selectIsLoggedIn } from 'src/app/store/app.selector';\nimport { AccountService } from 'src/app/services';\n\n@Component({\n  selector: 'app-interior-page',\n  templateUrl: './interior-page.component.html',\n  styleUrls: ['./interior-page.component.scss']\n})\nexport class InteriorPageComponent implements OnInit {\n  public isLoggedIn;\n  public selectIsLoggedIn$: Observable<boolean> = this.store.select(selectIsLoggedIn);\n  constructor(public store: Store<AppState>, private accountService: AccountService) { \n    this.selectIsLoggedIn$.subscribe(val => {\n      this.isLoggedIn = val;\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  logout() {\n    this.accountService.logout();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./interior-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<article>\n    <app-header [isLoggedIn] = \"isLoggedIn\" >\n    </app-header>\n    <router-outlet>\n    </router-outlet>\n    <footer>\n    </footer> \n</article>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-6c92ca2280639dce44ba2915d2d11e71",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "store",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AccountService } from 'src/app/services/account.service';\nimport { first } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/app.model';\nimport { IsLoggedIn, UserLogin } from 'src/app/store/app.actions';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n    form: FormGroup;\n    loading = false;\n    submitted = false;\n    public error;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private router: Router,\n        private accountService: AccountService,\n        public store: Store<AppState>\n    ) {\n\n    }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n    }\n\n\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n        if (this.form.invalid) {\n            return;\n        }\n        this.accountService.login(this.f.username.value, this.f.password.value)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.router.navigate(['/login-user']);\n                    this.store.dispatch(new IsLoggedIn(true));\n                },\n                error: error => {\n                   this.error = error;\n                }\n            });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "body {font-family: Arial, Helvetica, sans-serif;}\r\nform {border: 3px solid #f1f1f1;\r\n    h1{\r\n        text-align: center;\r\n        color: #1abc9c;\r\n    }\r\n    .err{\r\n      color: red;\r\n    }\r\n}\r\n\r\ninput[type=text], input[type=password] {\r\n  width: 100%;\r\n  padding: 12px 20px;\r\n  margin: 8px 0;\r\n  display: inline-block;\r\n  border: 1px solid #ccc;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbutton {\r\n  background-color: #1abc9c;\r\n  color: white;\r\n  padding: 14px 20px;\r\n  margin: 8px 0;\r\n  border: none;\r\n  cursor: pointer;\r\n  width: 100%;\r\n}\r\n\r\n.btn-reg{\r\n    background-color: #1C4C73;\r\n    color: white;\r\n    padding: 14px 20px;\r\n    margin: 8px 0;\r\n    border: none;\r\n    cursor: pointer;\r\n    width: 100%;\r\n}\r\n\r\n.btn-reg:hover{\r\n    opacity: 0.8;\r\n}\r\n\r\nbutton:hover {\r\n  opacity: 0.8;\r\n}\r\n\r\n.cancelbtn {\r\n  width: auto;\r\n  padding: 10px 18px;\r\n  background-color: #f44336;\r\n}\r\n\r\n.imgcontainer {\r\n  text-align: center;\r\n  margin: 24px 0 12px 0;\r\n}\r\n\r\nimg.avatar {\r\n  width: 40%;\r\n  border-radius: 50%;\r\n}\r\n\r\n.container {\r\n  padding: 16px;\r\n}\r\n\r\nspan.psw {\r\n  float: right;\r\n  padding-top: 16px;\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                }
            },
            "templateData": "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <h1>Login</h1>\n    <h1 class=\"err\">{{error}}</h1>\n    <div class=\"container\">\n      <label for=\"uname\"><b>Username</b></label>\n      <input type=\"text\" placeholder=\"Enter Username\" formControlName=\"username\"/>\n      <div *ngIf=\"submitted && f.username.errors\">\n        <div *ngIf=\"f.username.errors.required\">Username is required</div>\n     </div>\n      <label for=\"psw\"><b>Password</b></label>\n      <input type=\"password\" placeholder=\"Enter Password\" formControlName=\"password\"/>\n      <div *ngIf=\"submitted && f.password.errors\">\n        <div *ngIf=\"f.password.errors.required\">Password is required</div>\n      </div>\n      <button type=\"submit\" [disabled]=\"loading\">Login</button>\n      <button class=\"btn-reg\" routerLink=\"/register\">Register</button>\n    </div>\n</form>\n"
        },
        {
            "name": "LoginUserComponent",
            "id": "component-LoginUserComponent-c88ed3486f7717eca9721969c36229ea",
            "file": "src/app/components/login-user/login-user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-user",
            "styleUrls": [
                "./login-user.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-user.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login-user',\n  templateUrl: './login-user.component.html',\n  styleUrls: ['./login-user.component.scss']\n})\nexport class LoginUserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login-user.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>login-user works!</p>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-ba3d734f814beae588226cea12dc6f47",
            "file": "src/app/components/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccountService } from 'src/app/services/account.service';\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  form: FormGroup;\n  public error ;\n  submitted = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private accountService: AccountService\n  ) { }\n\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      username: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  get f() { return this.form.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.form.invalid) {\n      return;\n    }\n    this.accountService.register(this.form.value)\n      .pipe(first())\n      .subscribe({\n        next: () => {\n          this.router.navigate(['/login'], { relativeTo: this.route });\n        },\n        error: error => {\n          this.error = error;\n        }\n      });\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "body {\r\n    font-family: Arial, Helvetica, sans-serif;\r\n  }\r\n  form {\r\n    border: 3px solid #f1f1f1;\r\n    h1 {\r\n      text-align: center;\r\n      color: #1abc9c;\r\n    }\r\n    .err{\r\n      color: red;\r\n    }\r\n  }\r\n  \r\n  input[type=\"text\"],\r\n  input[type=\"password\"] {\r\n    width: 100%;\r\n    padding: 12px 20px;\r\n    margin: 8px 0;\r\n    display: inline-block;\r\n    border: 1px solid #ccc;\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  button {\r\n    background-color: #1abc9c;\r\n    color: white;\r\n    padding: 14px 20px;\r\n    margin: 8px 0;\r\n    border: none;\r\n    cursor: pointer;\r\n    width: 100%;\r\n  }\r\n  \r\n  .btn-cancel {\r\n    background-color: lightsalmon;\r\n    color: white;\r\n    padding: 14px 20px;\r\n    margin: 8px 0;\r\n    border: none;\r\n    cursor: pointer;\r\n    width: 100%;\r\n  }\r\n  \r\n  .btn-reg:hover {\r\n    opacity: 0.8;\r\n  }\r\n  \r\n  button:hover {\r\n    opacity: 0.8;\r\n  }\r\n  \r\n  .cancelbtn {\r\n    width: auto;\r\n    padding: 10px 18px;\r\n    background-color: #f44336;\r\n  }\r\n  \r\n  .imgcontainer {\r\n    text-align: center;\r\n    margin: 24px 0 12px 0;\r\n  }\r\n  \r\n  img.avatar {\r\n    width: 40%;\r\n    border-radius: 50%;\r\n  }\r\n  \r\n  .container {\r\n    padding: 16px;\r\n  }\r\n  \r\n  span.psw {\r\n    float: right;\r\n    padding-top: 16px;\r\n  }\r\n  ",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                }
            },
            "templateData": "\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <h1>Register</h1>\n    <h1 class=\"err\">{{error}}</h1>\n    <div class=\"container\">\n        <label for=\"firstName\">First Name</label>\n        <input type=\"text\" formControlName=\"firstName\" />\n        <div *ngIf=\"submitted && f.firstName.errors\">\n            <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\n        </div>\n        <label for=\"lastName\">Last Name</label>\n        <input type=\"text\" formControlName=\"lastName\" [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\" />\n        <div *ngIf=\"submitted && f.lastName.errors\">\n            <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\n        </div>\n    \n    \n        <label for=\"username\">Username</label>\n        <input type=\"text\" formControlName=\"username\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\n        <div *ngIf=\"submitted && f.username.errors\">\n            <div *ngIf=\"f.username.errors.required\">Username is required</div>\n        </div>\n\n    \n        <label for=\"password\">Password</label>\n        <input type=\"password\" formControlName=\"password\"\n            [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n        <div *ngIf=\"submitted && f.password.errors\">\n            <div *ngIf=\"f.password.errors.required\">Password is required</div>\n            <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\n        </div>\n        <button>        \n            Register\n        </button>\n        <button class=\"btn-cancel\" routerLink=\"/login\">Cancel</button>\n    </div>\n</form>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ErrorInterceptorInterceptor"
                        },
                        {
                            "name": "JwtInterceptorInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "InteriorPageComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "LoginUserComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "darkTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/theme.service.ts",
                "type": "object",
                "defaultValue": "{\r\n  'primary-color': '#455363',\r\n  'background-color': '#1f2935',\r\n  'text-color': '#fff'\r\n}"
            },
            {
                "name": "defaultRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app-routing.module.ts",
                "type": "string",
                "defaultValue": "'/home'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:4000',\n  url: 'http://localhost:3000'\n}"
            },
            {
                "name": "fakeBackendProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "object",
                "defaultValue": "{\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: FakeBackendInterceptorInterceptor,\r\n    multi: true\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "lightTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/theme.service.ts",
                "type": "object",
                "defaultValue": "{\r\n  'primary-color': '#fff',\r\n  'background-color': '#fff',\r\n  'text-color': '#2d2d2d'\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/jestGlobalMocks.ts",
                "type": "",
                "defaultValue": "() => {\r\n    let storage = {};\r\n    return {\r\n        getItem: key => key in storage ? storage[key] : null,\r\n        setItem: (key, value) => storage[key] = value || '',\r\n        removeItem: key => delete storage[key],\r\n        clear: () => storage = {},\r\n    };\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.selector.ts",
                "type": "",
                "defaultValue": "(state: AppState) => state.appModel"
            },
            {
                "name": "selectData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectApp,\r\n    (state: AppModelState) => {\r\n        return state.data;\r\n    }\r\n)"
            },
            {
                "name": "selectError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectApp,\r\n    (state: AppModelState) => {\r\n        return state.error;\r\n    }\r\n)"
            },
            {
                "name": "selectIsLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectApp,\r\n    (state: AppModelState) => {\r\n        return state.isLoggedIn;\r\n    }\r\n)"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/jest.config.ts",
                "type": "",
                "defaultValue": "require('ts-jest/utils')"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/jest.config.ts",
                "type": "",
                "defaultValue": "require('./tsconfig')"
            },
            {
                "name": "users",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "",
                "defaultValue": "JSON.parse(localStorage.getItem(usersKey)) || []"
            },
            {
                "name": "usersKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "string",
                "defaultValue": "'angular-10-registration-login-example-users'"
            }
        ],
        "functions": [
            {
                "name": "appReducer",
                "file": "src/app/store/app.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "AppModelState",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AppAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "FetchUserData | FetchUserDataSuccess | IsLoggedIn | SaveSharedLinks | SaveSharedLinksSuccess | SaveSharedLinksError | IsError | UserLogin | UserLoginSuccess | UserLoginError",
                "file": "src/app/store/app.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AppActionType",
                "childs": [
                    {
                        "name": "FETCH_USER_DATA",
                        "value": "Activity: FETCH_USER_DATA"
                    },
                    {
                        "name": "FETCH_USER_DATA_SUCCESS",
                        "value": "Activity: FETCH_USER_DATA_SUCCESS"
                    },
                    {
                        "name": "FETCH_USER_DATA_ERROR",
                        "value": "Activity: FETCH_USER_DATA_ERROR"
                    },
                    {
                        "name": "IS_LOGGED_IN",
                        "value": "Activity: IS_LOGGED_IN"
                    },
                    {
                        "name": "IS_LOGGED_IN_SUCCESS",
                        "value": "Activity: IS_LOGGED_IN_SUCCESS"
                    },
                    {
                        "name": "SAVE_SHARED_LINKS",
                        "value": "Activity: SAVE_SHARED_LINKS"
                    },
                    {
                        "name": "SAVE_SHARED_LINKS_SUCCESS",
                        "value": "Activity: SAVE_SHARED_LINKS_SUCCESS"
                    },
                    {
                        "name": "SAVE_SHARED_LINKS_ERROR",
                        "value": "Activity: SAVE_SHARED_LINKS_ERROR"
                    },
                    {
                        "name": "DELETE_LINK",
                        "value": "Activity: DELETE_LINK"
                    },
                    {
                        "name": "DELETE_LINK_SUCCESS",
                        "value": "Activity: DELETE_LINK_SUCCESS"
                    },
                    {
                        "name": "DELETE_LINK_ERROR",
                        "value": "Activity: DELETE_LINK_ERROR"
                    },
                    {
                        "name": "UPDATE_LINK",
                        "value": "Activity: UPDATE_LINK"
                    },
                    {
                        "name": "UPDATE_LINK_SUCCESS",
                        "value": "Activity: UPDATE_LINK_SUCCESS"
                    },
                    {
                        "name": "UPDATE_LINK_ERROR",
                        "value": "Activity: UPDATE_LINK_SUCCESS"
                    },
                    {
                        "name": "IS_ERROR",
                        "value": "Activity: IS_ERROR"
                    },
                    {
                        "name": "USER_LOGIN",
                        "value": "Activity: USER_LOGIN"
                    },
                    {
                        "name": "USER_LOGIN_SUCCESS",
                        "value": "Activity: USER_LOGIN_SUCCESS"
                    },
                    {
                        "name": "USER_LOGIN_ERROR",
                        "value": "Activity: USER_LOGIN_ERROR"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/app.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/services/theme.service.ts": [
                {
                    "name": "darkTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/theme.service.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  'primary-color': '#455363',\r\n  'background-color': '#1f2935',\r\n  'text-color': '#fff'\r\n}"
                },
                {
                    "name": "lightTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/theme.service.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  'primary-color': '#fff',\r\n  'background-color': '#fff',\r\n  'text-color': '#2d2d2d'\r\n}"
                }
            ],
            "src/app/app-routing.module.ts": [
                {
                    "name": "defaultRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app-routing.module.ts",
                    "type": "string",
                    "defaultValue": "'/home'"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:4000',\n  url: 'http://localhost:3000'\n}"
                }
            ],
            "src/app/helpers/fake-backend-interceptor.interceptor.ts": [
                {
                    "name": "fakeBackendProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: FakeBackendInterceptorInterceptor,\r\n    multi: true\r\n}"
                },
                {
                    "name": "users",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                    "type": "",
                    "defaultValue": "JSON.parse(localStorage.getItem(usersKey)) || []"
                },
                {
                    "name": "usersKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                    "type": "string",
                    "defaultValue": "'angular-10-registration-login-example-users'"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/jestGlobalMocks.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/jestGlobalMocks.ts",
                    "type": "",
                    "defaultValue": "() => {\r\n    let storage = {};\r\n    return {\r\n        getItem: key => key in storage ? storage[key] : null,\r\n        setItem: (key, value) => storage[key] = value || '',\r\n        removeItem: key => delete storage[key],\r\n        clear: () => storage = {},\r\n    };\r\n}"
                }
            ],
            "src/app/store/app.selector.ts": [
                {
                    "name": "selectApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.selector.ts",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.appModel"
                },
                {
                    "name": "selectData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectApp,\r\n    (state: AppModelState) => {\r\n        return state.data;\r\n    }\r\n)"
                },
                {
                    "name": "selectError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectApp,\r\n    (state: AppModelState) => {\r\n        return state.error;\r\n    }\r\n)"
                },
                {
                    "name": "selectIsLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectApp,\r\n    (state: AppModelState) => {\r\n        return state.isLoggedIn;\r\n    }\r\n)"
                }
            ],
            "src/jest.config.ts": [
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/jest.config.ts",
                    "type": "",
                    "defaultValue": "require('ts-jest/utils')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/jest.config.ts",
                    "type": "",
                    "defaultValue": "require('./tsconfig')"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/app.reducer.ts": [
                {
                    "name": "appReducer",
                    "file": "src/app/store/app.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "AppModelState",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/app.actions.ts": [
                {
                    "name": "AppActionType",
                    "childs": [
                        {
                            "name": "FETCH_USER_DATA",
                            "value": "Activity: FETCH_USER_DATA"
                        },
                        {
                            "name": "FETCH_USER_DATA_SUCCESS",
                            "value": "Activity: FETCH_USER_DATA_SUCCESS"
                        },
                        {
                            "name": "FETCH_USER_DATA_ERROR",
                            "value": "Activity: FETCH_USER_DATA_ERROR"
                        },
                        {
                            "name": "IS_LOGGED_IN",
                            "value": "Activity: IS_LOGGED_IN"
                        },
                        {
                            "name": "IS_LOGGED_IN_SUCCESS",
                            "value": "Activity: IS_LOGGED_IN_SUCCESS"
                        },
                        {
                            "name": "SAVE_SHARED_LINKS",
                            "value": "Activity: SAVE_SHARED_LINKS"
                        },
                        {
                            "name": "SAVE_SHARED_LINKS_SUCCESS",
                            "value": "Activity: SAVE_SHARED_LINKS_SUCCESS"
                        },
                        {
                            "name": "SAVE_SHARED_LINKS_ERROR",
                            "value": "Activity: SAVE_SHARED_LINKS_ERROR"
                        },
                        {
                            "name": "DELETE_LINK",
                            "value": "Activity: DELETE_LINK"
                        },
                        {
                            "name": "DELETE_LINK_SUCCESS",
                            "value": "Activity: DELETE_LINK_SUCCESS"
                        },
                        {
                            "name": "DELETE_LINK_ERROR",
                            "value": "Activity: DELETE_LINK_ERROR"
                        },
                        {
                            "name": "UPDATE_LINK",
                            "value": "Activity: UPDATE_LINK"
                        },
                        {
                            "name": "UPDATE_LINK_SUCCESS",
                            "value": "Activity: UPDATE_LINK_SUCCESS"
                        },
                        {
                            "name": "UPDATE_LINK_ERROR",
                            "value": "Activity: UPDATE_LINK_SUCCESS"
                        },
                        {
                            "name": "IS_ERROR",
                            "value": "Activity: IS_ERROR"
                        },
                        {
                            "name": "USER_LOGIN",
                            "value": "Activity: USER_LOGIN"
                        },
                        {
                            "name": "USER_LOGIN_SUCCESS",
                            "value": "Activity: USER_LOGIN_SUCCESS"
                        },
                        {
                            "name": "USER_LOGIN_ERROR",
                            "value": "Activity: USER_LOGIN_ERROR"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/app.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/app.actions.ts": [
                {
                    "name": "AppAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "FetchUserData | FetchUserDataSuccess | IsLoggedIn | SaveSharedLinks | SaveSharedLinksSuccess | SaveSharedLinksError | IsError | UserLogin | UserLoginSuccess | UserLoginError",
                    "file": "src/app/store/app.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "InteriorPageComponent",
                        "children": [
                            {
                                "path": "",
                                "redirectTo": "defaultRoute",
                                "pathMatch": "full"
                            },
                            {
                                "path": "home",
                                "redirectTo": "defaultRoute",
                                "pathMatch": "full"
                            },
                            {
                                "path": "login",
                                "component": "LoginComponent"
                            },
                            {
                                "path": "register",
                                "component": "RegisterComponent"
                            },
                            {
                                "path": "home",
                                "component": "HomeComponent"
                            },
                            {
                                "path": "login-user",
                                "component": "LoginUserComponent",
                                "canActivate": [
                                    "AuthGuard"
                                ]
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/interior-page/interior-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InteriorPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login-user/login-user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginUserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/error-interceptor.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorInterceptorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "FakeBackendInterceptorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeBackendProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "users",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/fake-backend-interceptor.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "usersKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/jwt-interceptor.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "JwtInterceptorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/appModel.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppModelState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/account.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/app-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppServiceService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "darkTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lightTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteLink",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteLinkError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteLinkSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FetchUserData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FetchUserDataError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FetchUserDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IsError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IsLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SaveSharedLinks",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SaveSharedLinksError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SaveSharedLinksSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateLink",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateLinkError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateLinkSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserLogin",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserLoginError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserLoginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppEffects",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "appReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/jest.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/jest.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/jestGlobalMocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}